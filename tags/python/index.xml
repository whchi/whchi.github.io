<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 社畜人生</title>
    <link>http://shachiku.life/tags/python/</link>
    <description>Recent content in python on 社畜人生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>&amp;copy; whchi 2018</copyright>
    <lastBuildDate>Sat, 11 Mar 2023 11:35:55 +0800</lastBuildDate><atom:link href="http://shachiku.life/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何限制 python json api 格式</title>
      <link>http://shachiku.life/2023/03/how-to-restrict-json-api-format-with-python/</link>
      <pubDate>Sat, 11 Mar 2023 11:35:55 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/03/how-to-restrict-json-api-format-with-python/</guid>
      <description>use pydantic, the world is better</description>
    </item>
    
    <item>
      <title>Disable sqlmodel foreign key constraint</title>
      <link>http://shachiku.life/2023/03/disable-sqlmodel-foreign-key-constraint/</link>
      <pubDate>Mon, 06 Mar 2023 08:39:21 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/03/disable-sqlmodel-foreign-key-constraint/</guid>
      <description>When writing tests, you should follow the unit-of-work principle, which means separating data with each test. In Django, there is a method called refresh_from_db that can achieve this. However, in Flask or FastAPI, you need to implement it yourself. Here&amp;rsquo;s how to do it with SQLModel (a SQLAlchemy wrapper):
conftest.py from sqlalchemy.orm import sessionmaker from sqlmodel import Session, SQLModel @pytest.fixture(autouse=True) def refresh_database(db: Session): SQLModel.metadata.create_all(engine) yield db.close() SQLModel.metadata.drop_all(engine) If your SQLModel ORM includes foreign keys, creating or dropping all of them will result in a foreign key constraint issue.</description>
    </item>
    
    <item>
      <title>使用 python 模擬 laravel filesystem</title>
      <link>http://shachiku.life/2023/01/laravel-like-filesystem-using-python/</link>
      <pubDate>Wed, 04 Jan 2023 13:47:17 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/01/laravel-like-filesystem-using-python/</guid>
      <description>good artists copy</description>
    </item>
    
    <item>
      <title>Setup FastAPI Debugger in VSCode With Docker</title>
      <link>http://shachiku.life/2022/12/setup-fastapi-debugger-in-vscode-with-docker/</link>
      <pubDate>Fri, 16 Dec 2022 13:57:12 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/12/setup-fastapi-debugger-in-vscode-with-docker/</guid>
      <description>The key is launch.json and tasks.json and uvicorn --workers=1
Context Local for python app, docker container for non-application services like database/redis&amp;hellip;etc
If all of your services are run in container you SHOULD use remote debug
0. Dockerfile Here I use docker-compose as example
docker-compose.debug.yml version: &amp;#34;3.8&amp;#34; services: pgsql: image: postgres:13 restart: unless-stopped environment: - POSTGRES_HOST_AUTH_METHOD=trust - POSTGRES_USER=root - POSTGRES_PASSWORD= - POSTGRES_DB=postgres volumes: - postgres:/var/lib/postgresql/data ports: - &amp;#39;5432:5432&amp;#39; privileged: true volumes: postgres: 1.</description>
    </item>
    
    <item>
      <title>Setup FastAPI Debugger in PyCharm With Docker</title>
      <link>http://shachiku.life/2022/12/setup-fastapi-debugger-in-pycharm-with-docker/</link>
      <pubDate>Fri, 16 Dec 2022 11:58:19 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/12/setup-fastapi-debugger-in-pycharm-with-docker/</guid>
      <description>The key is running only one worker when start uvicorn
Context Local for python app, docker container for non-application services like database/redis&amp;hellip;etc
If all of your services are run in container you SHOULD use remote debug
0. Dockerfile Here I use docker-compose as example
docker-compose.debug.yml version: &amp;#34;3.8&amp;#34; services: pgsql: image: postgres:13 restart: unless-stopped environment: - POSTGRES_HOST_AUTH_METHOD=trust - POSTGRES_USER=root - POSTGRES_PASSWORD= - POSTGRES_DB=postgres volumes: - postgres:/var/lib/postgresql/data ports: - &amp;#39;5432:5432&amp;#39; privileged: true volumes: postgres: 1.</description>
    </item>
    
    <item>
      <title>善用 lru_cache 對設定檔進行 cache</title>
      <link>http://shachiku.life/2020/12/use-lru-cache-for-setting/</link>
      <pubDate>Wed, 16 Dec 2020 18:27:35 +0800</pubDate>
      
      <guid>http://shachiku.life/2020/12/use-lru-cache-for-setting/</guid>
      <description>蟒蛇小技巧</description>
    </item>
    
    <item>
      <title>Mac Connect to SQL Server</title>
      <link>http://shachiku.life/2019/09/mac-connect-to-sql-server/</link>
      <pubDate>Thu, 05 Sep 2019 11:30:49 +0800</pubDate>
      
      <guid>http://shachiku.life/2019/09/mac-connect-to-sql-server/</guid>
      <description>以 python 為例</description>
    </item>
    
  </channel>
</rss>
