<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recommendation on 社畜人生</title>
    <link>http://shachiku.life/tags/recommendation/</link>
    <description>Recent content in recommendation on 社畜人生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>&amp;copy; whchi 2018</copyright>
    <lastBuildDate>Fri, 17 Mar 2023 23:28:49 +0800</lastBuildDate><atom:link href="http://shachiku.life/tags/recommendation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[推薦] 正向代理 vs 反向代理</title>
      <link>http://shachiku.life/2023/03/forward-proxy-vs-reverse-proxy/</link>
      <pubDate>Fri, 17 Mar 2023 23:28:49 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/03/forward-proxy-vs-reverse-proxy/</guid>
      <description>後端的前面就是前端，前端的後面就是後端</description>
    </item>
    
    <item>
      <title>[推薦] 系統設計面試時的思考框架</title>
      <link>http://shachiku.life/2023/03/framework-of-system-design-interview/</link>
      <pubDate>Wed, 08 Mar 2023 21:44:22 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/03/framework-of-system-design-interview/</guid>
      <description>Source https://www.youtube.com/watch?v=i7twT3x5yv8 9:53
Summary 適用於大概 60 min 的面試
理解問題（5 min） who is the user? what core feature to build? 釐清 non-functional requirement.(安全性、可用性&amp;hellip;) 進行高度抽象的設計並取得認同（20 min） functional-related RESTful API interfaces，注意 API 的回應資料 系統設計示意圖（user-&amp;gt;service-&amp;gt;database），重點在於畫出來的每個服務都是 e2e 不要太快進入細節（db scaling, concurrency, failure scenarios） data model design: the key part of non-functional requirements data access pattern, R/W ratio what db to choose? how to make indexes? 深入設計細節（25 min） 對 non-functional requirement 更為細節的討論 闡明問題-&amp;gt;提出 2 種解法-&amp;gt;討論解法的 tradeoffs-&amp;gt;選定決定解法 無限 loop wrap up（5 min） </description>
    </item>
    
    <item>
      <title>[推薦] 程式設計師最不該做的事</title>
      <link>http://shachiku.life/2023/03/things-programer-should-never-do/</link>
      <pubDate>Tue, 07 Mar 2023 21:31:16 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/03/things-programer-should-never-do/</guid>
      <description>寫程式</description>
    </item>
    
    <item>
      <title>[推薦] 如何在沒有 mentor 的情況下自學成才</title>
      <link>http://shachiku.life/2023/03/learning-without-a-mentor/</link>
      <pubDate>Sat, 04 Mar 2023 21:13:57 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/03/learning-without-a-mentor/</guid>
      <description>學習是永遠是痛苦的</description>
    </item>
    
    <item>
      <title>[推薦] Function Programing 的基礎觀念</title>
      <link>http://shachiku.life/2023/03/function-programing-the-basics/</link>
      <pubDate>Sat, 04 Mar 2023 18:58:15 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/03/function-programing-the-basics/</guid>
      <description>少見的中文講解 FP 概念</description>
    </item>
    
    <item>
      <title>[推薦] 少用繼承，多用 composition</title>
      <link>http://shachiku.life/2023/01/prefer-composition-over-inheritance/</link>
      <pubDate>Sun, 08 Jan 2023 11:13:34 +0800</pubDate>
      
      <guid>http://shachiku.life/2023/01/prefer-composition-over-inheritance/</guid>
      <description>Source https://www.youtube.com/watch?v=hxGOiiR9ZKg 10:00
Summary Inheritance&amp;rsquo;s cost is expensive when changing requirement, and will need to write methods which your subclass doesn&amp;rsquo;t needs. Use composition to write more usable code.
re-use abstraction inheritance extending parent class composition using interface Unlike extending parent class, interfaces defines only the critical part of the contract, it&amp;rsquo;s coupling the codes and is adaptable with new requirements.</description>
    </item>
    
    <item>
      <title>[推薦] auth 沒你想像的複雜</title>
      <link>http://shachiku.life/2022/12/what-is-auth/</link>
      <pubDate>Sun, 25 Dec 2022 16:12:51 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/12/what-is-auth/</guid>
      <description>當我們說到 auth 時，我們究竟在說什麼</description>
    </item>
    
    <item>
      <title>[推薦] Parse Don&#39;t Validate</title>
      <link>http://shachiku.life/2022/12/parse-dont-validate/</link>
      <pubDate>Tue, 20 Dec 2022 21:21:43 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/12/parse-dont-validate/</guid>
      <description>輸入的階段就直接解析成正確的型態</description>
    </item>
    
    <item>
      <title>[推薦] 物件導向的 SOLID 原則</title>
      <link>http://shachiku.life/2022/11/oop-solid-principle/</link>
      <pubDate>Fri, 18 Nov 2022 19:31:01 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/11/oop-solid-principle/</guid>
      <description>越基礎越抽象</description>
    </item>
    
    <item>
      <title>[推薦] 為何預估這麼困難</title>
      <link>http://shachiku.life/2022/11/why-are-estimations-so-hard/</link>
      <pubDate>Sat, 05 Nov 2022 22:24:17 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/11/why-are-estimations-so-hard/</guid>
      <description>divide and conquer</description>
    </item>
    
    <item>
      <title>[推薦] 成為專家的心態</title>
      <link>http://shachiku.life/2022/07/mindset-of-becoming-an-expert/</link>
      <pubDate>Tue, 26 Jul 2022 16:01:07 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/07/mindset-of-becoming-an-expert/</guid>
      <description>Source 为什么你有10年经验，但成不了专家？
Summary 基本上都是老生常談，不過經典的原則本來就是經的起考驗且務實
避免自動完成：很反直覺，已經習慣的事情要不斷重新檢討精進 離開舒適圈：跨入學習區，做那些超過自己能力一些的事情 犧牲短期利益：進行刻意練級導致短期績效下降，比如用全新的程式語言做一樣的功能 大量重複訓練 持續取得反饋 </description>
    </item>
    
    <item>
      <title>[推薦] 如何找到開源專案貢獻</title>
      <link>http://shachiku.life/2022/07/how-to-find-open-source-projects-to-contribute/</link>
      <pubDate>Tue, 26 Jul 2022 15:10:15 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/07/how-to-find-open-source-projects-to-contribute/</guid>
      <description>軟體面向全球，不該被拘束在一個地方</description>
    </item>
    
    <item>
      <title>[推薦]分布式系統的 8 個謬誤</title>
      <link>http://shachiku.life/2022/07/8-fallacies-of-distributed-computing/</link>
      <pubDate>Sun, 10 Jul 2022 19:33:53 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/07/8-fallacies-of-distributed-computing/</guid>
      <description>設計分散式系統時須具備的基礎思考要點</description>
    </item>
    
    <item>
      <title>[推薦] 過早最佳化是萬惡的根源</title>
      <link>http://shachiku.life/2022/07/premature-optimization-is-the-root-of-all-evil/</link>
      <pubDate>Mon, 04 Jul 2022 12:15:52 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/07/premature-optimization-is-the-root-of-all-evil/</guid>
      <description>過早最佳化是萬惡的根源</description>
    </item>
    
    <item>
      <title>[推薦] Mysql Lock Index and Deadlock</title>
      <link>http://shachiku.life/2022/07/mysql-lock-index-and-deadlock/</link>
      <pubDate>Sat, 02 Jul 2022 23:29:49 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/07/mysql-lock-index-and-deadlock/</guid>
      <description>lock is a good thing</description>
    </item>
    
    <item>
      <title>[推薦] What Is Api Gateway</title>
      <link>http://shachiku.life/2022/06/what-is-api-gateway/</link>
      <pubDate>Tue, 07 Jun 2022 12:08:42 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/06/what-is-api-gateway/</guid>
      <description>gateway is a good thing</description>
    </item>
    
    <item>
      <title>[推薦] Mock Database or Not</title>
      <link>http://shachiku.life/2022/06/mock-database-or-not/</link>
      <pubDate>Mon, 06 Jun 2022 16:14:40 +0800</pubDate>
      
      <guid>http://shachiku.life/2022/06/mock-database-or-not/</guid>
      <description>mock is a good thing</description>
    </item>
    
  </channel>
</rss>
